= PGroonga運用技法

 : subtitle
    ~PGroongaのWALを\n放置していませんか？~
 : author
    堀本泰弘
 : institution
    クリアコード
 : content-source
    PostgreSQL Conference Japan 2020
 : date
    2020-11-13
 : allotted-time
    45m
 : start-time
    2020-11-13T16:10:00+09:00
 : end-time
    2020-11-13T16:55:00+09:00
 : theme
    .

= 自己紹介

  # image
  # src = images/self-introduction.png
  # relative_height = 107

= 今日のテーマ

PGroongaの\nWALを\n((*うまく*))使おう

= PGroongaの紹介

の前に...

= PGroongaの紹介

(知らない人向け)\n
PGroonga紹介

= PGroongaの紹介

PGroongaとは？

= PGroongaの紹介

PostgreSQL経由で\n((*高速な全文検索*))

= PGroongaの特徴

(1) ((*簡単*))に使える
(2) ((*速い*))
(3) ((*全言語*))対応

= PGroongaの使い方

((*簡単*))に使える

= PGroongaの使い方

  # image
  # src = images/pgroonga-sql.png
  # relative_height = 107

= PGroongaの使い方

実際に全文検索\nしてみましょう

= 実行例：テーブル定義

  # coderay sql

  CREATE TABLE entries (
    title text,
    content text
  );

= 実行例：\nインデックス定義

  # coderay sql

  -- 全文検索用インデックス
  CREATE INDEX entries_full_text_search
    ON entries
    --「USING pgroonga」=「PGroongaを使う」
    USING pgroonga (title, content);

= 実行例：データ挿入

  # coderay sql

  -- 普通に挿入するだけでよい
  INSERT INTO entries
    VALUES ('PGroongaで高速全文検索！',
            '高速に全文検索したいですね！');

= 実行例：全文検索

  # coderay sql

  SELECT title FROM entries
    WHERE
  -- &@~で全文検索
  -- 「検索」と「高速」をAND検索
      title &@~ '検索 高速' OR
      content &@~ '検索 高速';

= 実行例：LIKE

  # coderay sql

  SELECT title FROM entries
    WHERE
  -- LIKEでもインデックスが効く
  --＝アプリを書き換えずに高速化可能
  -- ただし&@~より性能が落ちる
      title LIKE '%検索%' OR
      content LIKE '%検索%';

= PGroongaの使い方

((*簡単*))ですね！

= PGroongaの速度

((*速い*))

= PGroongaの速度

追加されたデータは((*即時*))検索可能

= PGroongaの速度

つまり

= PGroongaの速度

検索可能になるのが((*速い*))

= PGroongaの速度

更新中も検索性能が((*落ちない*))

= PGroongaの速度

ヒット数が多くても検索性能が\n((*落ちない*))

= PGroongaの速度

PGroongaは\n
((*安定して*))速い

= PGroongaの速度

もちろん\n検索も((*速い*))

= PGroongaの速度

* ベンチマーク
  * ((<URL:https://pgroonga.github.io/ja/reference/pgroonga-versus-pg-bigm.html>))

= PGroongaの特徴

((*全言語*))対応

= PGroongaの特徴

さらに

= PGroongaの特徴

((*継続*))してメンテナンスされている

= PGroongaの特徴

PostgreSQL13\nにも対応！

= PGroongaの紹介

以上、PGroongaの紹介でした

= 今日のテーマ

本題に入ります

= 今日のテーマ

PGroongaの\nWALを\n((*うまく*))使おう

= WALとは？

Write Ahead Log\n

= WALとは？

  # image
  # src = images/WAL1.png
  # relative_width = 70

= WALの使い方

どのように\n使うのか？

= WALの使い方

ポイントイン\nタイムリカバリー

= WALの使い方

  # image
  # src = images/pitr.png
  # relative_width = 90

= WALの使い方

ストリーミング\nレプリケーション

= WALの使い方

  # image
  # src = images/streaming-replication.png
  # relative_width = 90

= PGroongaのWAL

PGroongaも\nWALが使える

= PGroongaのWAL

WALから\nインデックスの\n復元ができる

= PGroongaのWAL

メリット

= PGroongaのWAL

インデックスの\n復旧時間を短縮

= PGroongaのWAL

WALがない\n場合の復元

= PGroongaのWAL

REINDEX

= PGroongaのWAL

REINDEXは\n時間がかかる

= PGroongaのWAL

どうやって\n使うの？

= PGroongaのWAL

簡単です\n
((*ただ使うだけ*))\nなら

= PGroongaのWAL

  # coderay sql

    pgroonga.enable_wal = on

= PGroongaのWAL

* PostgreSQLのWALと同じように復旧に使える
  * ポイントインタイムリカバリー
  * ストリーミングレプリケーション

= PGroongaのWAL

しかし

= PGroongaのWAL

ただ使っている\nだけだと、\n((*困る*))ことがある

= PGroongaのWALの注意点

(1) WALが適用できないケース\nがある
(2) 定期的なメンテナンスが必要

= PGroongaのWALの注意点

WALが適用\nできないケース

= PGroongaのWALの注意点

* クラッシュセーフ((*ではない*))
  * インデックス更新中のクラッシュで\nインデックスが破損する(ことがある)

= PGroongaのWALの注意点

* インデックス破損の状態では、WALを適用できない(ことがある)
  * この場合はREINDEXを使って復元

= PGroongaのWALの注意点

定期的な\nメンテナンス

= PGroongaのWALの注意点

* PGroongaのインデックスのファイルサイズが((*増加し続ける*))

= PGroongaのレプリケーション

  # image
  # src = images/increase-file-size.png
  # relative_width = 90

= PGroongaのWALの注意点

  # image
  # src = images/vaccum.png
  # relative_width = 90

= PGroongaのWALの注意点

なぜ？

= ファイルサイズ増加の原因

原因はPGroongaのWAL

= ファイルサイズ増加の原因

PGroongaのWALは削除しないと\n((*増え続ける*))

= ファイルサイズ増加の原因

つまり

= ファイルサイズ増加の原因

(1) PGroongaのWALが有効
(2) 何もせずにずっと運用している

= ファイルサイズ増加の原因

  # image
  # src = images/index-increase.png
  # relative_width = 100

= PGroongaのWALの運用方法

なので

= PGroongaのWALの運用方法

((*定期的な\nメンテナンス*))\nが必要

= PGroongaのWALの運用方法

ファイルサイズの増加を防ぐには？

= PGroongaのWALの運用方法

(1) REINDEXによるインデックス再構築
(2) WALを定期的に削除

= REINDEX

* REINDEXすると、インデックスを0から再生成
* 古いインデックスは、VACUUM時に削除
  * このときにWALも削除される

= REINDEX

  * 😞 時間がかかる
  * 😞 REINDEX中は検索、更新がブロックされる
  * 😃 手間は少ない

= WALの定期的な削除

* PGroongaのWALはSQLで削除\nできる

= WALの定期的な削除

  # coderay sql

    SELECT pgroonga_wal_truncate('インデックス名');

= WALの定期的な削除

  * 😞 手間がかかる
    * テーブルのロックが必要
      * データの更新ができない
    * 明示的なWALの適用が必要
  * 😃 REINDEXより短時間

= WALの定期的な削除

* 明示的なWALの適用が必要
  * 単純にWAL削除すると、未適用のWALまで削除してしまう可能性がある

= PGroongaのWALの運用方法

なので

= PGroongaのWALの運用方法

明示的にWALを適用する

= PGroongaのWALの運用方法

  # coderay sql

    SELECT pgroonga_wal_apply('インデックス名');

= PGroongaのWALの運用方法

ストリーミング\nレプリケーション\n構成の場合

= PGroongaのWALの運用方法

((*全て*))の\nセカンダリーDBでWALを適用

= PGroongaのWALの運用方法

(1) プライマリーDBでテーブルをロック
(2) 全てのセカンダリーDBでWALを適用
(3) プライマリーDBでWALを削除
(4) テーブルのロックを解除

= メンテナンス方法の選択

(1) REINDEXによるインデックス再構築
(2) WALを定期的に削除

のどちらが良いのか？

= メンテナンス方法の選択

* REINDEX

  * 😞 時間がかかる
  * 😞 REINDEX中は検索、更新がブロックされる
    * ブロックせずにREINDEXする方法もある
  * 😃 手間は少ない

= メンテナンス方法の選択

* REINDEX CONCURRENTLY
  * PostgreSQL 12 以降で使える

= メンテナンス方法の選択

* 😞 インデックスの構築にかなり時間がかかる
* 😞 インデックス構築中は\nパフォーマンスが低下する

= メンテナンス方法の選択

* WALの定期的な削除
  * 😞 手間がかかる
    * テーブルのロックが必要
      * データの更新ができない
    * 明示的なWALの適用が必要
  * 😃 REINDEXより短時間

= メンテナンス方法の選択

* REINDEX向きのケース
  * 長時間のサービス停止が許容できる
    * 例えば夜間に実行するなど
  * テーブルが小さい

= メンテナンス方法の選択

* WALの削除向きのケース
  * 長時間のサービス停止が難しい
  * テーブルが大きい

= PostgreSQLのWAL

* PostgreSQLのWALはこのような作業は必要ない。

= PostgreSQLのWAL

* PostgreSQLはWALの最大サイズを制御できる
  * max_wal_size
  * wal_keep_segments
* チェックポイント以前のログは\n再利用可能

= PostgreSQLのWAL

* PGroongaには、PostgreSQLと同程度の機能はまだない。

= PostgreSQLのWAL

* 今後、改善予定
  * PostgreSQLと同じような仕組みを追加

= まとめ

PGroongaの\nWALを\n((*うまく*))使うことができました！！

= 最後に

* PGroongaについての疑問等は、GitHub、Gitterにて
* ドキュメントも充実
  * ((<"https://pgroonga.github.io/ja/"|URL:https://pgroonga.github.io/ja/>))

= 最後に

より突っ込んだお話がしたい場合は↓↓\n
問い合わせ先：

(('tag:x-small'))
((<"https://www.clear-code.com/contact/"|URL:https://www.clear-code.com/contact/>))
